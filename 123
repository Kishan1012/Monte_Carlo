import numpy as np

# Monte Carlo simulation for E-mini S&P 500 Futures
def monte_carlo_esp500(S0, T, r, sigma, N_simulations, N_steps, multiplier=50):
    """
    S0 : float : Current price of the underlying asset (S&P 500 index level)
    T : float : Time to maturity (in years)
    r : float : Risk-free interest rate
    sigma : float : Volatility of the asset (S&P 500 index)
    N_simulations : int : Number of Monte Carlo simulations
    N_steps : int : Number of steps in each simulation (time intervals)
    multiplier : int : Contract multiplier for E-mini S&P 500 futures (default is 50)

    Returns:
    float : Expected futures price at maturity
    float : Standard deviation of futures prices at maturity
    """

    dt = T / N_steps  # Time step
    futures_prices = np.zeros((N_simulations, N_steps + 1))
    futures_prices[:, 0] = S0  # Initialize the first column to be the current S&P 500 price

    # Simulate price paths using geometric Brownian motion (GBM)
    for t in range(1, N_steps + 1):
        Z = np.random.standard_normal(N_simulations)  # Generate random normal numbers
        futures_prices[:, t] = futures_prices[:, t-1] * np.exp((r - 0.5 * sigma ** 2) * dt + sigma * np.sqrt(dt) * Z)

    # Get the futures price at maturity (last column)
    futures_prices_at_maturity = futures_prices[:, -1]

    # Convert futures prices to contract values using the multiplier
    futures_contract_values = futures_prices_at_maturity * multiplier

    # Calculate expected futures price and its standard deviation
    expected_futures_price = np.mean(futures_contract_values)
    std_futures_price = np.std(futures_contract_values)

    return expected_futures_price, std_futures_price

# Parameters for E-mini S&P 500 Futures
S0 = 4400  # Current S&P 500 index level (Example value, adjust to current value)
T = 1  # Time to maturity (1 year)
r = 0.03  # Risk-free interest rate (3%)
sigma = 0.18  # Volatility (18%, adjust based on historical data)
N_simulations = 10000  # Number of simulations
N_steps = 252  # Number of time steps (daily)

# Run the Monte Carlo simulation
expected_futures_price, std_futures_price = monte_carlo_esp500(S0, T, r, sigma, N_simulations, N_steps)

# Output the results
print(f"Expected E-mini S&P 500 Futures Price at Maturity: ${expected_futures_price:.2f}")
print(f"Standard Deviation of Futures Prices at Maturity: ${std_futures_price:.2f}")
